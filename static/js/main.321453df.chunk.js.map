{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","icon","city","country","temperature","Math","round","humidity","error","API_KEY","App","state","undefined","event","a","preventDefault","target","elements","value","fetch","api_call","json","data","setState","main","temp","sys","weather","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"oUAQeA,EANA,kBACb,6BACE,wBAAIC,UAAU,yBAAd,oBCSWC,EAXF,SAAAC,GAAK,OAChB,6BACE,0BACAC,SAAUD,EAAME,YACd,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,SAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,YAC9C,kDCuBSC,EA7BC,SAAAN,GAAK,OACnB,yBAAKF,UAAU,iBACZE,EAAMO,MACL,yBAAKT,UAAS,uCAAkCE,EAAMO,QAEvDP,EAAMQ,MAAQR,EAAMS,SACnB,uBAAGX,UAAU,gBAAb,YACY,IACV,0BAAMA,UAAU,kBACbE,EAAMQ,KADT,IACgBR,EAAMS,UAIzBT,EAAMU,aACL,uBAAGZ,UAAU,gBAAb,eACe,IACb,0BAAMA,UAAU,kBAAhB,IAAmCa,KAAKC,MAAMZ,EAAMU,aAApD,UAGHV,EAAMa,UACL,uBAAGf,UAAU,gBAAb,aACY,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMa,SAAzC,MAIbb,EAAMc,OAAS,uBAAGhB,UAAU,kBAAkBE,EAAMc,SCtBnDC,EAAU,mCAuEDC,E,2MApEbC,MAAQ,CACNP,iBAAaQ,EACbV,UAAMU,EACNT,aAASS,EACTL,cAAUK,EACVX,UAAMW,EACNJ,WAAOI,G,EAGThB,W,uCAAa,WAAMiB,GAAN,qBAAAC,EAAA,6DACXD,EAAME,iBACAb,EAAOW,EAAMG,OAAOC,SAASf,KAAKgB,MAClCf,EAAUU,EAAMG,OAAOC,SAASd,QAAQe,MAHnC,SAKYC,MAAM,qDAAD,OAC2BjB,EAD3B,YACmCC,EADnC,kBACoDM,EADpD,kBALjB,cAKLW,EALK,gBAQQA,EAASC,OARjB,OAQLC,EARK,OAUPpB,GAAQC,EACV,EAAKoB,SAAS,CACZnB,YAAakB,EAAKE,KAAKC,KACvBvB,KAAMoB,EAAKxB,KACXK,QAASmB,EAAKI,IAAIvB,QAClBI,SAAUe,EAAKE,KAAKjB,SACpBN,KAAMqB,EAAKK,QAAQ,GAAG1B,KACtBO,MAAO,KAGT,EAAKe,SAAS,CACZnB,iBAAaQ,EACbV,UAAMU,EACNT,aAASS,EACTL,cAAUK,EACVX,UAAMW,EACNJ,MAAO,yBA1BA,4C,8HAgCX,OACE,6BACE,yBAAKhB,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,0DACb,yBAAKA,UAAU,kBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMI,WAAYgC,KAAKhC,cAEzB,yBAAKJ,UAAU,qBACb,kBAAC,EAAD,CACEY,YAAawB,KAAKjB,MAAMP,YACxBF,KAAM0B,KAAKjB,MAAMT,KACjBC,QAASyB,KAAKjB,MAAMR,QACpBI,SAAUqB,KAAKjB,MAAMJ,SACrBN,KAAM2B,KAAKjB,MAAMV,KACjBO,MAAOoB,KAAKjB,MAAMH,iB,GA1DlBqB,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLuC,QAAQvC,MAAMA,EAAMwC,c","file":"static/js/main.321453df.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Titles = () => (\n  <div>\n    <h1 className=\"form-container__title\">Weather Finder</h1>\n  </div>\n);\n\nexport default Titles;\n","import React from \"react\";\n\nconst Form = props => (\n  <div>\n    <form \n    onSubmit={props.getWeather}>\n      <input type=\"text\" name=\"city\" placeholder=\"city\" />\n      <input type=\"text\" name=\"country\" placeholder=\"country\" />\n      <button>Get Weather</button>\n    </form>\n  </div>\n);\n\nexport default Form;\n","import React from \"react\";\n\nconst Weather = props => (\n  <div className=\"weather__info\">\n    {props.icon && (\n      <div className={`weather__icon weather__icon--${props.icon}`}></div>\n    )}\n    {props.city && props.country && (\n      <p className=\"weather__key\">\n        Location:{\" \"}\n        <span className=\"weather__value\">\n          {props.city} {props.country}\n        </span>\n      </p>\n    )}\n    {props.temperature && (\n      <p className=\"weather__key\">\n        Temperature:{\" \"}\n        <span className=\"weather__value\"> {Math.round(props.temperature)}Â°C</span>\n      </p>\n    )}\n    {props.humidity && (\n      <p className=\"weather__key\">\n        Humidity: <span className=\"weather__value\"> {props.humidity}%</span>\n      </p>\n    )}\n\n    {props.error && <p className=\"weather__error\">{props.error}</p>}\n  </div>\n);\n\nexport default Weather;","import React from \"react\";\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\nconst API_KEY = \"ed5b6f0766286eca3fd6c988716e9826\";\n\nclass App extends React.Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    icon: undefined,\n    error: undefined\n  };\n\n  getWeather = async event => {\n    event.preventDefault();\n    const city = event.target.elements.city.value;\n    const country = event.target.elements.country.value;\n\n    const api_call = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`\n    );\n    const data = await api_call.json();\n\n    if (city && country) {\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        icon: data.weather[0].icon,\n        error: \"\"\n      });\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        icon: undefined,\n        error: \"Please enter a value\"\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"app-container p-0 h-100 d-flex flex-column flex-lg-row\">\n              <div className=\"form-container\">\n                <Titles />\n                <Form getWeather={this.getWeather} />\n              </div>\n              <div className=\"weather-container\">\n                <Weather\n                  temperature={this.state.temperature}\n                  city={this.state.city}\n                  country={this.state.country}\n                  humidity={this.state.humidity}\n                  icon={this.state.icon}\n                  error={this.state.error}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}